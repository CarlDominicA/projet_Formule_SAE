/*
Programme : TEST_CAN_AFF.4Dino
Auteur :    Marc-Etienne Gendron-Fontaine, Felix-Antoine Guimont
Date :      10 avril 2024
Brief :     Ceci est le code pour la d�mo pour l'�v�nement Osentreprendre.

Materielle: ESP32-S3 (x1), Ecran 7" de 4d systeme, TJA1050 (x2)
Encironement: Workshop 4 V4.9.0.9,
Systeme d'exploitation: Windows 10 V22H2.
*/


#include "gfx4desp32_%%displaynm%%.h"

gfx4desp32_%%displaynm%% gfx = gfx4desp32_%%displaynm%%();

#include "TEST_CAN_AFFConst.h"    // Note. This file will not be created if there are no generated graphics

#include <ESP32-TWAI-CAN.hpp>



#define CAN_TX    43
#define CAN_RX    44

// VARIALBLE GLOBALE
CanFrame rxFrame;   // Pour la trame CAN


void setup()
{
  gfx.begin();
  gfx.Cls();
  gfx.ScrollEnable(false);
  gfx.BacklightOn(true);
  gfx.Orientation(%%orientation%%);
  gfx.SmoothScrollSpeed(5);
  gfx.TextColor(WHITE, BLACK); gfx.Font(2);  gfx.TextSize(1);
  gfx.Open4dGFX("TEST_CAN_AFF"); // Opens DAT and GCI files for read using filename without extension.
  gfx.touch_Set(TOUCH_ENABLE);                // Global touch enabled

  // CAN -----------------------------------


  ESP32Can.setPins(CAN_TX, CAN_RX);                 // Initialisation des Pin RX et TX
  ESP32Can.setSpeed(ESP32Can.convertSpeed(1000));    // Initialisation de la vitesse de transmission

  // Initialisation du Queue size à 1.
  ESP32Can.setRxQueueSize(1);
  ESP32Can.setTxQueueSize(1);

  // regarde si les driver CAN sont démarré
  if(ESP32Can.begin())
      gfx.println("CAN bus started!");
  else
      gfx.println("CAN bus failed!");


  delay(2000);

  // Initialisation des widgets
  //gfx.UserImages(iAngularmeter1,0);
  gfx.UserImage(iLeddigits1);
  gfx.UserImages(iAngularmeter1,0);
}

void loop()
{

    // Si on re�oit une trame CAN, on met � jour les widgets.
    // Sinon, on affiche "EN ATTENTE DE DONN�ES...". Bloque à
    // chaque 50 ms.
    if(ESP32Can.readFrame(rxFrame, 50))
    {

      // Convertis les donn�es re�ues en ASCII en INTEGER.
      int mil = ((int)rxFrame.data[4] - 48) * 1000;
      int cent = ((int)rxFrame.data[5] - 48) * 100;
      int diz = ((int)rxFrame.data[6] - 48) * 10;
      int uni = (int)rxFrame.data[7] - 48;
      int total = mil + cent + diz + uni;


      // Mets à jour les widgets
      gfx.UserImages(iAngularmeter1, total);
      gfx.LedDigitsDisplay(total, iiLeddigits1, 4, 3, 53, 0);

        /*if (total < 9)
           gfx.LedDigitsDisplay(total, iiLeddigits1, 4, 3, 53, 0);
        if (total > 9 && total < 99 )
          gfx.LedDigitsDisplay(total, iiLeddigits1, 4, 3, 53, 0);
          if (total > 99 && total < 999 )
          gfx.LedDigitsDisplay(total, iiLeddigits1, 4, 3, 53, 0);
          if (total > 999 && total < 9999 )
          gfx.LedDigitsDisplay(total, iiLeddigits1, 4, 3, 53, 0);
          */

    }
    else
    {
      gfx.MoveTo(150,150);
      gfx.Cls();
      gfx.MoveTo(250,250);
      gfx.print("EN ATTENTE DE DONN�ES...");
    }

  // put your main code here, to run repeatedly:
  /*int itouched, val ;
  if(gfx.touch_Update())
  {
    itouched = gfx.imageTouched() ;
    switch (itouched)
    {                                                         // start touched selection **do not alter, remove or duplicate this line**
      // case statements for Knobs and Sliders go here
      default :                                               // end touched selection **do not alter, remove or duplicate this line**
        int button = gfx.ImageTouchedAuto();    // use default for keyboards and buttons
        val = gfx.getImageValue(button);
        switch (button)
        {                                                     // start button selection **do not alter, remove or duplicate this line**
          // case, one for each button or keyboard, default should end up as -1
        }                                                     // end button selection **do not alter, remove or duplicate this line**
    }
  } */
}

